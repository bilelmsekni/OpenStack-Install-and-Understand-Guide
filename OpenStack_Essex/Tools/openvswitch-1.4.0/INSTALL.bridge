              Replacing a Linux Bridge with Open vSwitch
              ==========================================

This file documents how Open vSwitch may be used as a drop-in
replacement for a Linux kernel bridge in an environment that includes
elements that are tightly tied to the Linux bridge tools
(e.g. "brctl") and architecture.  We recommend directly using the
management tools provided with Open vSwitch rather than these
compatibility hooks for environments that are not tightly tied to the
Linux bridging tools; they are more efficient and better reflect the
actual operation and status.

Installation Procedure
----------------------

The procedure below explains how to use the Open vSwitch bridge
compatibility support.  This procedure is written from the perspective
of a system administrator manually loading and starting Open vSwitch
in bridge compatibility mode, but of course in practice one would want
to update system scripts to follow these steps.  If you do edit your
system configuration files to start Open vSwitch at boot time, make
sure that it starts up before any bridge configuration (e.g. before
any calls to "brctl" or "ifup" of any bridge interfaces), to ensure
that the Open vSwitch kernel modules are loaded before the Linux
kernel bridge module.

1. Build, install, and start up the Open vSwitch kernel modules and
   userspace programs as described in INSTALL.Linux.

   It is important to run "make install", because some Open vSwitch
   programs expect to find files in locations selected at installation
   time.  The instructions below assume that files are installed in
   their default locations, under /usr/local.

2. Load the brcompat kernel module (which was built in step 1), e.g.:

      % insmod datapath/linux/brcompat_mod.ko

   (openvswitch_mod.ko should already have been loaded.)

3. Start ovs-brcompatd:

      % ovs-brcompatd --pidfile --detach

   (ovsdb-server and ovs-vswitchd should already have been loaded.)

4. Now you should be able to manage the Open vSwitch using brctl and
   related tools.  For example, you can create an Open vSwitch bridge,
   add interfaces to it, then print information about bridges with the
   commands:

      % brctl addbr br0
      % brctl addif br0 eth0
      % brctl addif br0 eth1
      % brctl show

   Each of these commands actually uses or modifies the Open vSwitch
   configuration database, then notifies the ovs-vswitchd daemon of
   the change.  For example, after executing the commands above
   starting from an empty configuration file, "ovs-vsctl list-ports
   br0" should show that bridge br0 contains two ports, eth0 and eth1.
